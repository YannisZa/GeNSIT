log_level = 'info'
sweep_mode = true

[inputs]
n_workers = +1
n_threads = +6
device = 'cpu'
in_directory = './data/inputs/'
dataset = 'DC'
load_experiment = ''
# seed = 1234
[inputs.seed.sweep]
  default = 1
  range = "1:10:1"
  
[inputs.data]
    [inputs.data.region_features]
      file = 'mini_region_features.npy'
      # 'region_features.npy'
    [inputs.data.adjacency_matrix]
      file = 'adjacency_matrix.txt'
    [inputs.data.origin_demand]
      file = 'origin_demand_sum_normalised.txt'
    [inputs.data.destination_attraction_ts]
      file ='destination_attraction_housing_units_ts_sum_normalised.txt'
    [inputs.data.cost_matrix]
      file = "cost_matrix_max_normalised.txt"
    [inputs.data.ground_truth_table]
      file = 'ground_truth_table.txt'
    [inputs.data.test_cells]
        file = 'test_cells.txt'
    [inputs.data.train_cells]
        file = 'zero_and_train_cells.txt'
    [inputs.data.validation_cells]
        file = 'validation_cells.txt'

[contingency_table]
  sparse_margins = false
  [contingency_table.constraints]
    cells = true
    axes = [[0],[1]]

[training]
  num_steps = +1
  batch_size = +1000
  N = 1000
  intensity_model = 'spatial_interaction_model'
  physics_model = 'harris_wilson_model'
  
[hyperparameter_optimisation]
  n_trials = 100
  timeout = nan
  metric_minimise = true
  metric_evaluation = "MathUtils.srmse(prediction=prediction,ground_truth=ground_truth_table,mask=mask)"

[xgboost]
  disable_tqdm = true
  [xgboost.hyperparameters]
    xg_max_depth = 4
    xg_learning_rate = 0.5473698638379005
    xg_objective = 'reg:squarederror'
    xg_eval_metric = 'rmse'
    xg_tree_method = 'hist'
    xg_max_delta_step = 0.1290289329907377
    xg_min_child_weight = 4.908563679496025
    # xg_alpha = 0.5
    # xg_lambda = 5.0
    # xg_gamma = 0.5
    # xg_subsample = 0.8
  
[random_forest]
  disable_tqdm = true
  [random_forest.hyperparameters]
    rf_max_depth = 2
    rf_min_samples_split = 22
    rf_min_samples_leaf = 21
    rf_oob_score = true
  

[gradient_boosted_regression_trees]
  disable_tqdm = true
  [gradient_boosted_regression_trees.hyperparameters]
    gbrt_max_depth = 8
    gbrt_min_samples_split = 92
    gbrt_min_samples_leaf = 16


[graph_attention_network]
  disable_tqdm = true
  [graph_attention_network.hyperparameters]
    gat_nodes_per_layer = 32
    gat_num_hidden_layers = 1
    gat_dropout = 0
    gat_reg_param = 0
    gat_negative_sampling_rate = 0
    gat_grad_norm = 1.0
    gat_optimizer = 'Adam'
    gat_learning_rate = 0.09848334228302577
    gat_multitask_weights = [0.7037524669618522, 0.036865784928021526, 0.25938174811012615]
    

[[experiments]]
  type = 'XGBoost_Comparison'
  comment = 'Gradient Boosted Trees Vanilla Algorithm Comparison'
  disable_tqdm = true
  export_samples = true
  export_metadata = true
  overwrite = true
  validate_samples = false

[[experiments]]
  type = 'RandomForest_Comparison'
  comment = 'Random Forest Vanilla Algorithm Comparison'
  disable_tqdm = false
  export_samples = true
  export_metadata = true
  overwrite = true
  validate_samples = false

[[experiments]]
  type = 'GBRT_Comparison'
  comment = 'Gradient Boosted Trees Vanilla Algorithm Comparison'
  disable_tqdm = false
  export_samples = true
  export_metadata = true
  overwrite = true
  validate_samples = false

[[experiments]]
  type = 'GraphAttentionNetwork_Comparison'
  comment = 'Graph Attention Network Algorithm Comparison'
  disable_tqdm = false
  export_samples = true
  export_metadata = true
  overwrite = true
  validate_samples = false


[outputs]
    chunk_size = +20_000
    write_start = +1
    write_every = +1
    out_directory = './data/outputs/'
    out_group = 'comparisons'
    title = '_doubly_and_cell_constrained'